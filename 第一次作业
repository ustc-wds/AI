import matplotlib.pyplot as plt
import numpy as np
import numpy.random as rnd
np.random.seed(42)
#导包


# noinspection PyUnresolvedReferences
import matplotlib as mpl
m=100
X = 2 * np.random.rand(100, 1)
y = 5.6* X**3 -3.4 * X**2+1.2 * X + 5 + np.random.randn(100,1)    #生成100个数据的数据集
#生成数据集

plt.plot(X, y, "b.")                              
plt.xlabel("$x_1$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([0, 3, 0, 50])
#画图


from sklearn.preprocessing import PolynomialFeatures
poly_features = PolynomialFeatures(degree=3, include_bias=False)         
X_poly = poly_features.fit_transform(X)
X[0]
#转化3阶成为线性回归模型


X_poly[0]
# 打印


from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X_poly, y)
lin_reg.intercept_, lin_reg.coef_


X_new=np.linspace(0, 3, 100).reshape(100, 1)
X_new_poly = poly_features.transform(X_new)
y_new = lin_reg.predict(X_new_poly)
plt.plot(X, y, "b.")
plt.plot(X_new, y_new, "r-", linewidth=2, label="Predictions")
plt.xlabel("$x_1$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.legend(loc="upper left", fontsize=14)
plt.axis([0, 3, 0, 50])
plt.show()
#3阶多项式拟合


from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
for style, width, degree in (("g-", 1, 3), ("b--", 2, 2), ("r-+", 2, 1)):      #三阶，二阶，一阶
    polybig_features = PolynomialFeatures(degree=degree, include_bias=False)
    std_scaler = StandardScaler()
    lin_reg = LinearRegression()
    polynomial_regression = Pipeline([
            ("poly_features", polybig_features),
            ("std_scaler", std_scaler),
            ("lin_reg", lin_reg),
        ])
    polynomial_regression.fit(X, y)
    y_newbig = polynomial_regression.predict(X_new)
    plt.plot(X_new, y_newbig, style, label=str(degree), linewidth=width)

plt.plot(X, y, "b.", linewidth=3)
plt.legend(loc="upper left")
plt.xlabel("$x_1$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([0, 3, 0, 50])
plt.show()
#3阶，2阶，1阶拟合（标label，坐标轴）


from sklearn.metrics import mean_squared_error                        #表现为欠拟合
from sklearn.model_selection import train_test_split
def plot_learning_curves(model, X, y):
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=10)
    train_errors, val_errors = [], []
    for m in range(1, len(X_train)):
        model.fit(X_train[:m], y_train[:m])
        y_train_predict = model.predict(X_train[:m])
        y_val_predict = model.predict(X_val)
        train_errors.append(mean_squared_error(y_train[:m], y_train_predict))
        val_errors.append(mean_squared_error(y_val, y_val_predict))
    plt.plot(np.sqrt(train_errors), "r-+", linewidth=2, label="train")          #打印出来训练集效果和验证集效果都差，rmse较大（>5）
    plt.plot(np.sqrt(val_errors), "b-", linewidth=3, label="val")
    plt.legend(loc="upper right", fontsize=14)   # not shown in the book
    plt.xlabel("Training set size", fontsize=14) # not shown
    plt.ylabel("RMSE", fontsize=14)              # not shown
    #输入
    
lin_reg = LinearRegression()
plot_learning_curves(lin_reg, X, y)
plt.axis([0, 30, 0, 20])  # not shown in the book
plt.show()
    #学习曲线拟合             这里注册缩进全顶格，否则报错
    
    from sklearn.pipeline import Pipeline

polynomial_regression = Pipeline([
        ("poly_features", PolynomialFeatures(degree=10, include_bias=False)),    #10阶，表现为过拟合
        ("lin_reg", LinearRegression()),
    ])

plot_learning_curves(polynomial_regression, X, y)
plt.axis([0, 30, 0, 20])           # not shown
save_fig("learning_curves_plot")  # not shown
plt.show()                        # not shown                               #过拟合：打印出来训练集效果好，验证集效果差
    
    
    
    
    
